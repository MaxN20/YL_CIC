import logging
import sqlite3
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.types.input_file import InputFile
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram import executor
import asyncio
import aioschedule
import requests
from Resources.food_shop import food_products
from Resources.health_shop import health_products
from Resources.technic_shop import technic_products
from Resources.skill_shop import skill_products
from config import company_dict, company_list, anon_name, anon_end, hack_work_list, hack_work_dict
from config import jobs_file, jobs_list, list_of_good_users, emoji_dict, beta_test_users
from config import beta_test_users_file, beta_test_users_set, users_games_file, users_games_set
from config import good_news, bad_news, moneydict, channel_name
from config import admin_id, admin_balance_flag, admin_user_flag, admin_promo_flag, admin_promo_info_flag, admin_mailing, text_mail, ton_for_sub_flag, list_of_good_users, programsdict
from config import API_TOKEN, bot, dp
from config import bd_1, bd_2, bd_3, conn, cursor, conn2, cursor2, conn3, cursor3  
from administrator import admin
from market import shop
from exchanger import process_exchange_money
import json
import requests
from deep_translator import GoogleTranslator


async def check_work(user_id, callback_query):
    if cursor2.execute("SELECT user_id FROM programs WHERE user_id = ?", (user_id,)).fetchone() != None:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üìã–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"program_status:{user_id}")  ,          
            InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}")
            )        
        await bot.send_message(user_id, "<b>üìå–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞</b>", reply_markup=keyboard, parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)        
        return True

async def check_life(user_id, callback_query):
    if cursor.execute("SELECT status FROM users WHERE user_id = ?", (user_id,)).fetchone()[0] == '–≤—ã–±—ã–ª':
        await bot.send_message(user_id, "<b>üìå–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—ë—Ä—Ç–≤, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É:\n\n–ù–∞–∂–º–∏—Ç–µ: /start</b>", parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)        
        return True

async def check_all_values(user_id):
    cursor.execute("UPDATE users SET hunger = 100 WHERE user_id = ? AND hunger > 100", (user_id,))
    cursor.execute("UPDATE users SET energy = 100 WHERE user_id = ? AND energy > 100", (user_id,))
    cursor.execute("UPDATE users SET health = 100 WHERE user_id = ? AND health > 100", (user_id,))
    
    cursor.execute("SELECT user_id FROM users WHERE user_id = ? AND health <= 0", (user_id,))
    result = cursor.fetchone() 
    if cursor.fetchone() != None:
        cursor.execute("UPDATE users SET status = '–≤—ã–±—ã–ª', flag = None WHERE user_id = ?", (user_id,))
        users_games_set.discard(user_id)
        await bot.send_message(user_id, "<b>üòî–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É /start</b>", parse_mode='html')
    conn.commit()

async def decrease_hunger():
    cursor.execute("UPDATE users SET hunger = hunger - 1 WHERE hunger > 0")
    cursor.execute("UPDATE users SET health = health - 5 WHERE health > 0 AND hunger = 0")
    conn.commit()
    
    cursor.execute("SELECT user_id FROM users WHERE hunger = 20")
    hunger20_users = cursor.fetchall()

    for user_id in hunger20_users:
        user_id = user_id[0]
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üõç–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data=f"shop:{user_id}"))
        await bot.send_message(user_id, "<b>ü§§–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ–ª–æ–¥–µ–Ω, –≤–∞–º —Å—Ç–æ–∏—Ç –µ–≥–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å</b>", reply_markup=keyboard, parse_mode='html')    
    
    cursor.execute("SELECT user_id FROM users WHERE health <= 0 AND status != '–≤—ã–±—ã–ª'")
    dead_users = cursor.fetchall()

    for user_id in dead_users:
        user_id = user_id[0]
        cursor.execute("UPDATE users SET status = '–≤—ã–±—ã–ª', flag = 'None' WHERE user_id = ?", (user_id,))
        users_games_set.discard(user_id)
        await bot.send_message(user_id, "<b>üòî–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± –æ—Ç –≥–æ–ª–æ–¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É /start</b>", parse_mode='html')
    conn.commit()

async def sleep():
    cursor.execute("SELECT user_id FROM users WHERE status = ?", ('—Å–ø–∏—Ç',))
    sleep_users = cursor.fetchall()
    for user_id in sleep_users:
        user_id = user_id[0]
        cursor.execute("UPDATE users SET energy = energy + 1 WHERE user_id = ?", (user_id,))
        await check_all_values(user_id)
    conn.commit()
        
async def work():
    cursor.execute("SELECT user_id FROM users WHERE status != ? AND status != ? AND status != ?", ('—Å–ø–∏—Ç', '–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', '–≤—ã–±—ã–ª'))
    work_users = cursor.fetchall()
    for user_id in work_users:
        user_id = user_id[0]
        cursor.execute("SELECT energy FROM users WHERE user_id = ?", (user_id,))
        energy = cursor.fetchall()[0][0]
        if energy == 0:
            cursor2.execute("UPDATE programs SET status = ? WHERE user_id = ?", ('no', user_id))
            conn2.commit()
            cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', user_id))
            conn.commit()
            await bot.send_message(user_id, "<b>üòì–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å—Ç–∞–ª –∏ –Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å</b>", parse_mode='html')
        else:
            cursor2.execute("UPDATE programs SET time = time - 1 WHERE user_id = ?", (user_id,))
            conn2.commit()
            cursor.execute("UPDATE users SET energy = energy - 1, rep = rep + 20 WHERE user_id = ?", (user_id,))
            conn.commit()
            cursor2.execute("SELECT time, status FROM programs WHERE user_id = ?", (user_id,))
            if cursor2:
                flag, status = cursor2.fetchone()
            if flag <= 0 and status != 'ready':
                cursor2.execute("UPDATE programs SET status = ? WHERE user_id = ?", ('ready', user_id))
                conn2.commit()
                cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', user_id))
                conn.commit()
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üëâ–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"program_status:{user_id}")
                )     
                await bot.send_message(user_id, "<b>üëç–ó–∞–¥–∞—á–∞ –ø–æ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>", reply_markup=keyboard, parse_mode='html')

async def game_pay():
    for user_id in users_games_set:
        if os.path.exists(f'{user_id}.db'):
            conn6 = sqlite3.connect(f'{user_id}.db')
            cursor6 = conn6.cursor()
            if cursor6.execute("SELECT i FROM games").fetchone() == None:
                conn6.close()
                os.remove(f'{user_id}.db')
                users_games_set.discard(user_id)
            else:
                for game in cursor6.execute("SELECT i, time, count, price, donate, name FROM games").fetchall():
                    idd, time, count, price, donate, name = game                           
                    cursor6.execute("UPDATE games SET time = time - 1 WHERE i == ?", (idd,))
                    conn6.commit()                                            
                    if time - 1 == 0:
                        itog_price = random.randint(int(price * 0.9), int(price * 1.1))   
                        itog_donate = random.randint(0, 4) + random.randint(0, 9) / 10
                        cursor = conn.cursor()                        
                        cursor.execute("UPDATE users SET ruble = ruble + ?, toncoin = toncoin + ? WHERE user_id == ?", (itog_price, itog_donate, user_id))
                        conn.commit()   
                        cursor6.execute("UPDATE games SET summ = summ + ?, donate = donate + ? WHERE i == ?", (itog_price, itog_donate, idd))
                        conn6.commit()                         
                        keyboard = InlineKeyboardMarkup(row_width=1)
                        keyboard.add(
                            InlineKeyboardButton("üëç–ö—Ä—É—Ç–æ!", callback_data=f"profile:{user_id}")
                        )                     
                        await bot.send_message(user_id, f'<b>üí∏–ò–≥—Ä–∞: "{name}" –ø—Ä–∏–Ω–µ—Å–ª–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é {itog_price} ‚ÇΩ –∏ {itog_donate} TON –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>', reply_markup=keyboard, parse_mode='html')                       
                        if count != 3:                                            
                            cursor6.execute("UPDATE games SET time = 36, count = count + 1 WHERE i == ?", (idd,))
                            conn6.commit()                       
                        else:
                            cursor6.execute("DELETE FROM games WHERE i = ?", (idd,))
                            conn6.commit()  
                            await bot.send_message(user_id, f'<b>‚ùóÔ∏è–ò–≥—Ä–∞ —Å–Ω—è—Ç–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º –¥–µ–Ω–µ–≥</b>', parse_mode='html') 

async def hack_work_gen():
    cursor.execute("SELECT user_id FROM users WHERE status = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç',))
    hack_work_users = cursor.fetchall()
    for user_id in hack_work_users:
        user_id = user_id[0] 
        if int(random.choices([1, 0], weights=[1, 9], k=1)[0]) == 1 and cursor2.execute("SELECT user_id FROM programs WHERE user_id = ?", (user_id,)).fetchone() == None:
            time = int(random.choices([4, 5, 6, 7, 8], weights=[1, 2, 3, 4, 5], k=1)[0])
            price = round(time * float(random.choices([1.5, 1.8, 1.7, 1.6, 1.5], weights=[1, 2, 3, 4, 5], k=1)[0]), 1)
            rep = int(price * 50)
            name = random.choices(anon_name)[0]
            end = random.choices(anon_end)[0]
            work = random.choices(hack_work_list)[0]
            hack_work_dict[user_id] = work
            if end == 'random':
                end = ''
                for i in range(random.randint(3, 7)):
                    end += str(random.randint(0, 10))
            name += end
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"hack_work_g:{user_id}:{time}:{price}:{rep}"),
                InlineKeyboardButton("‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"hack_work_b:{user_id}")
            )
            text = f'''<b>üìü–í–∞–º –ø—Ä–∏—à–ª–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {name}:</b>
            
<b>–ó–∞–¥–∞—á–∞: {work}</b>
<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time} —á.</b>
<b>–î–æ—Ö–æ–¥: {price} TON</b>
<b>–†–µ–ø—É—Ç–∞—Ü–∏—è: -{rep}</b>'''
            await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode='html')

async def scheduler():
    aioschedule.every(30).minutes.do(decrease_hunger)
    aioschedule.every(5).minutes.do(sleep)
    aioschedule.every(15).minutes.do(work)
    aioschedule.every(2).hours.do(game_pay)
    aioschedule.every(1).hours.do(hack_work_gen)
    
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(10)

async def on_startup(dp):    
    asyncio.create_task(scheduler())       
    
@dp.message_handler(commands=['stop'])
async def stop_global(message: types.Message):
    user_id = message.from_user.id
    if admin_id == user_id:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ–î–∞", callback_data=f"stop_global_a:{user_id}"),
            InlineKeyboardButton("‚ùå–ù–µ—Ç", callback_data=f"stop_global_b:{user_id}")                  
                ) 
        await bot.send_message(user_id, "–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?", reply_markup=keyboard)
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'stop_global_a')
async def stop_global_a(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    await bot.send_message(user_id, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞") 
    await bot.delete_message(user_id, callback_query.message.message_id)    
    exit()
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'stop_global_b')
async def stop_global_b(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    await bot.send_message(user_id, "–§—É—Ö, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –º–µ–Ω—è –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª") 
    await bot.delete_message(user_id, callback_query.message.message_id)    
        
@dp.message_handler(commands=['admin'])
async def admin_m(message: types.Message):
    await admin(message)
    
@dp.message_handler(commands=["ref"])
async def get_ref(message: types.Message):
    link = await get_start_link(str(message.from_user.id), encode=True)
    await message.answer(f"<b>üî•–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–∞:\n\n{link}\n\nüìå–í—ã –ø–æ–ª—É—á–∏—Ç–µ: 10 TON –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥\nüìå–†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∏—Ç: 20 TON</b>", parse_mode='html')
    
@dp.message_handler(commands=["fact"])
async def get_fact(message: types.Message):
    user_id = message.from_user.id    
    text = requests.get('https://catfact.ninja/fact/').json()['fact']
    transleted = GoogleTranslator(source='en', target='ru').translate(text) 
    keyboard = InlineKeyboardMarkup()    
    keyboard.add(
        InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}")
    )    
    await message.answer(f'<b>üëâ{transleted}\n\n<a href="https://t.me/cat_in_code_bot">#–ö–û–¢_–í_–ö–û–î–ï</a></b>', reply_markup=keyboard, disable_web_page_preview = True, parse_mode='html')
    
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    try:
        args = message.get_args()
        reference = decode_payload(args)
    except:
        reference = ''
    cursor.execute("SELECT status FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}")
        )
    if not result or result[0] == '–≤—ã–±—ã–ª':
        telegram_name = message.from_user.first_name
        try:
            telegram_name += ' ' + message.from_user.last_name
        except:
            pass
        try:
            cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))
            conn2.commit()
        except:
            pass
        if os.path.exists(f'{user_id}.db'):
            os.remove(f'{user_id}.db')        
        if user_id in users_games_set:
            users_games_set.remove(user_id)
        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        cursor.execute("INSERT OR IGNORE INTO users (user_id, telegram_name, energy, health, hunger, status, rep, ruble, dollar, toncoin, exchange, skill, computer, flag) VALUES (?, ?, 100, 100, 100, '–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', 0, 10000, 0, 0, '', 0, 'digma', 'None')", (user_id, telegram_name))
        conn.commit()
        beta_test_users_set.add(user_id)
        beta_test_users_file = open("Resources/beta.txt", "a")
        beta_test_users_file.write(str(user_id))
        beta_test_users_file.write('\n')        
        beta_test_users_file.close()        
        await message.answer("<b>üëã–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –∏–≥—Ä–µ. –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–µ –∑–∞–±—É–¥—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: @cat_in_code_beta</b>\n\n<b><i>‚öôÔ∏è–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π: /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ</i></b>", reply_markup=keyboard, parse_mode='html')
        if reference != '' and int(reference) != user_id:
            await message.answer("<b><i>üî•–¢—ã –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –¢–≤–æ—ë –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ - 20 TON</i></b>", parse_mode='html')
            cursor.execute("UPDATE users SET toncoin = toncoin + 20 WHERE user_id = ?", (user_id,))
            cursor.execute("UPDATE OR IGNORE users SET toncoin = toncoin + 10 WHERE user_id = ?", (int(reference),))
            conn.commit()                
            try:
                await bot.send_message(int(reference), "<b><i>üî•–†–µ—Ñ–µ—Ä–∞–ª –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ. –¢–≤–æ—ë –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ - 10 TON</i></b>", parse_mode='html')              
            except:
                pass
    else:
        await message.answer("<b>‚úÖ–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n<b><i>‚öôÔ∏è–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π: /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ</i></b>", reply_markup=keyboard, parse_mode='html')

@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(row_width=1)    
    keyboard.add(    
    InlineKeyboardButton(text="üéìWiKi", web_app=WebAppInfo(url='https://telegra.ph/KOT-V-KODE---WiKi-02-18')),
    InlineKeyboardButton(text="üèÜ–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", web_app=WebAppInfo(url='https://www.donationalerts.com/r/i_maxxl')),
    InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}")
    )    
    await bot.send_message(user_id, '<b>#–ö–û–¢_–í_–ö–û–î–ï - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≥—Ä—É–∑–∏—Ç—Å—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏—Ä –∂–∏–∑–Ω–∏ –∫–æ—Ç–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞\n\nüß∂–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: /ref\n\nüò∫–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö: /fact\n\nüìå–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤: /leaderboard\n\nüëâ–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ <a href="https://telegra.ph/KOT-V-KODE---WiKi-02-18">–≤ —Å—Ç–∞—Ç—å–µ</a></b>', reply_markup=keyboard, parse_mode='html')

@dp.message_handler(commands=['leaderboard'])
async def leaderboard(message: types.Message):
    user_id = message.from_user.id    
    all_users = cursor.execute("SELECT user_id, rep, telegram_name FROM users WHERE status != '–≤—ã–±—ã–ª' ORDER BY rep DESC LIMIT 10").fetchall()
    this_user = conn.execute("SELECT user_id, rep, telegram_name, RANK() OVER (ORDER BY rep DESC) AS rank FROM users WHERE status != '–≤—ã–±—ã–ª'").fetchall()
    for i in this_user:
        if i[0] == user_id:
            this_user = i
            break
    c = 1
    leaderboard_text = "<b>‚ö°Ô∏è–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n<i>üëâ–†–µ–ø—É—Ç–∞—Ü–∏—è | –ò–º—è\n</i></b>"
    for user in all_users:
        if user[0] in beta_test_users_set:
            leaderboard_text += f"{c}. {user[1]} | {user[2]} - <b>(Œ≤)</b>\n"
        else:
            leaderboard_text += f"{c}. {user[1]} | {user[2]}\n"            
        c += 1
    leaderboard_text += "<b><i>...\n</i></b>"
    if this_user[0] in beta_test_users_set:    
        leaderboard_text += f"<b>{this_user[3]}. {this_user[1]} | {this_user[2]} - <b>(Œ≤)</b> - –í–´</b>\n"
    else:
        leaderboard_text += f"<b>{this_user[3]}. {this_user[1]} | {this_user[2]} - –í–´</b>\n"        
    await bot.send_message(user_id, leaderboard_text, parse_mode='html')    
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'shop')
async def shop_m(callback_query: types.CallbackQuery):
    await shop(callback_query)

@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'hack_work_g')
async def hack_work_g(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return 
    time = int(callback_query.data.split(':')[2]) * 4
    price = float(callback_query.data.split(':')[3])
    rep = int(callback_query.data.split(':')[4])
    try:
        work = hack_work_dict[user_id]
        del hack_work_dict[user_id]
    
        cursor.execute("UPDATE users SET rep = rep - ? WHERE user_id = ?", (rep, user_id,))
        conn.commit()       
    
        cursor2.execute("INSERT OR IGNORE INTO programs (user_id, name, description, time, price, skill, status, type, currency) VALUES (?, ?, ?, ?, ?, ?, 'no', 'hack', 'ton')", (    user_id, work, work, time, price, 0))
        conn2.commit()   
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("‚úÖ–ü–µ—Ä–µ–π—Ç–∏", callback_data=f"program_status:{user_id}"))         
        await bot.send_message(user_id, f"<b>üëå–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:</b>", reply_markup=keyboard, parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)
    except:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))
        await bot.send_message(user_id, f"<b>‚ùå–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–∞—É–∫—Ç–∞–ª—å–Ω–∞</b>", reply_markup=keyboard, parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)        
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'hack_work_b')
async def hack_work_b(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    try:
        del hack_work_dict[user_id]
    except:
        pass
    await bot.send_message(user_id, f"<b>üëå–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode='html')    
    await bot.delete_message(user_id, callback_query.message.message_id)    
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'tasks')
async def possible_tasks(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    cursor2.execute("SELECT status FROM programs WHERE user_id = ?", (user_id,))
    result = cursor2.fetchone()
    if result:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"program_status:{user_id}"))
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))        
        await bot.send_message(user_id, "<b>‚ùóÔ∏è–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>", reply_markup=keyboard, parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)
        
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üíΩ–ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", callback_data=f"makescript:{user_id}"))        
        keyboard.add(InlineKeyboardButton("üíæ–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"makeprogram:{user_id}"))
        keyboard.add(InlineKeyboardButton("üïπ–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É", callback_data=f"makegame:{user_id}"))    
        keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))

        await bot.send_message(user_id, "<b>üëâ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard, parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'makescript')
async def makescript_choice(callback_query: types.CallbackQuery):
    global message_text
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return 
    message_text = ''
    keyboard = InlineKeyboardMarkup(row_width=3) 
    data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()['Valute']['USD']['Value']
    async def create_script_task(i):
        global message_text
        time = random.randint(4, 12)
        k = random.randint(150, 200)
        company = random.choice(company_list)
        job = random.choice(jobs_list)
        price = int(time * k / 4)
        if company_dict[company] == '$':
            price = int(price * (1 / data) + 0.99)
        message_text = message_text + f'<b>{i}. –ö–æ–º–ø–∞–Ω–∏—è: {company}</b> ‚è∞: {round(time / 4, 2)} —á. üí≥: {price}{company_dict[company]}\n–ó–∞–¥–∞—á–∞: {job}\n'
        return InlineKeyboardButton(str(i), callback_data=f"a_script:{user_id}:{company_list.index(company)}:{jobs_list.index(job)}:{time}:{price}:{company_dict[company]}")
        
    for i in range(1, 7, 3):
        keyboard.add(await create_script_task(i), await create_script_task(i + 1), await create_script_task(i + 2))
           
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    message_text += '\n'
    message_text += '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë:</b>'
    await bot.send_message(user_id, message_text, reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(user_id, callback_query.message.message_id)    
   
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'a_script')
async def a_script(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return 
    if await check_work(user_id, callback_query):
        return     
    user_id, name, description, time, price, currency = callback_query.data.split(':')[1:]
    user_id, name, description, time, price = int(user_id), company_list[int(name)].strip(), jobs_list[int(description)].strip(), int(time), int(price) 
    name = f'{name} - {description}'
    if currency == '‚ÇΩ':
        currency = 'rub'
    else:
        currency = 'usd'
    cursor2.execute("INSERT OR IGNORE INTO programs (user_id, name, description, time, price, skill, status, type, currency) VALUES (?, ?, ?, ?, ?, ?, 'no', 'script', ?)", (user_id, name, description, int(time), price, 0, currency))
    conn2.commit()   
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚úÖ–ü–µ—Ä–µ–π—Ç–∏", callback_data=f"program_status:{user_id}"))         
    await bot.send_message(user_id, f"<b>üëå–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:</b>", reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(user_id, callback_query.message.message_id)
   
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'makegame')
async def makegame_start(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return 
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, '<b>üëâ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã:\n\n<i>–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "." (—Ç–æ—á–∫–∞)</i></b>', reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('game_name', user_id))
    conn.commit()   
    await bot.delete_message(user_id, callback_query.message.message_id)  
    
@dp.message_handler(lambda message: message.text and cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] == 'game_name' and '.' not in message.text)
async def makegame_name(message: types.Message):
    user_id = message.chat.id
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, f"<b>‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã:</b>", reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", (f'game_name_description.{message.text}', user_id))
    conn.commit()      
    
@dp.message_handler(lambda message: message.text and cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (message.chat.id,)).fetchone() and cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0].split('.')[0] == 'game_name_description')
async def makegame_description(message: types.Message):
    global programsdict
    user_id = message.chat.id
    flag = cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] + '.' + message.text
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", (flag, user_id))
    conn.commit()
    
    hourname = ''  
    cursor.execute("SELECT skill, flag FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    skill, name, description = result[0], result[1].split('.')[1], result[1].split('.')[2]
    time = random.choices(random.choices([[5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20], [21,22,23,24]], weights=[15, 20, 30, 20, 15], k=1)[0])[0]      
    price = int(int(time) * (150 - int(random.choices([10, 20, 30, 40, 50, 60, 70], weights=[24, 20, 16, 13, 11, 9, 7], k=1)[0]) + random.randint(1, 9)))
    cursor.execute("SELECT computer FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()[0]   
    time = (time / ((skill / 1000) + 1)) / technic_products[result][2]['speed']
    if int(time) in [2, 3, 4, 22, 23, 24]:
        hourname = '—á–∞—Å–∞'
    elif int(time) in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]:
        hourname = '—á–∞—Å–æ–≤'
    elif int(time) in [1, 21]:
        hourname = '—á–∞—Å'
    button_text = f"makegame_accept:{user_id}"
    programsdict[user_id] = f"{user_id}:{name}:{description}:{time}:{price}:{skill}"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=button_text)) 
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, f'<b>‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–µ "{name}":\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</b> {round(time, 1)} {hourname}\n<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {price}x4 ‚ÇΩ', reply_markup=keyboard, parse_mode='html')
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'makegame_accept')
async def makegame_accept(callback_query: types.CallbackQuery):
    global programsdict    
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return     
    user_id, name, description, time, price, skill = programsdict[user_id].split(':')
    user_id, time, price, skill = int(user_id), float(time) * 4, int(price), int(skill)    
    del programsdict[user_id]
    cursor2.execute("INSERT OR IGNORE INTO programs (user_id, name, description, time, price, skill, status, type, currency) VALUES (?, ?, ?, ?, ?, ?, 'no', 'game', 'rub')", (user_id, name, description, int(time), price, skill))
    conn2.commit()
    cursor.execute("UPDATE users SET flag = 'process' WHERE user_id = ?", (user_id,))
    conn.commit()    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚úÖ–ü–µ—Ä–µ–π—Ç–∏", callback_data=f"program_status:{user_id}"))         
    await bot.send_message(user_id, f"<b>üëå–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:</b>", reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(user_id, callback_query.message.message_id)
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'makeprogram')
async def makeprogram_start(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return     
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, '<b>üëâ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n<i>–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "." (—Ç–æ—á–∫–∞)</i></b>', reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('program_name', user_id))
    conn.commit()   
    await bot.delete_message(user_id, callback_query.message.message_id)    
    
@dp.message_handler(lambda message: message.text and cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] == 'program_name' and '.' not in message.text)
async def makeprogram_name(message: types.Message):
    user_id = message.chat.id
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, f"<b>‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>", reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", (f'program_name_description.{message.text}', user_id))
    conn.commit()      
    
@dp.message_handler(lambda message: message.text and cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (message.chat.id,)).fetchone() and cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0].split('.')[0] == 'program_name_description')
async def makeprogram_description(message: types.Message):
    global programsdict
    user_id = message.chat.id
    flag = cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] + '.' + message.text
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", (flag, user_id))
    conn.commit()
    
    hourname = ''
    cursor.execute("SELECT skill, flag FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    skill, name, description = result[0], result[1].split('.')[1], result[1].split('.')[2]
    time = random.choices(random.choices([[5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20], [21,22,23,24]], weights=[15, 20, 30, 20, 15], k=1)[0])[0]      
    price = int(2 * int(time) * (150 - int(random.choices([10, 20, 30, 40, 50, 60, 70], weights=[24, 20, 16, 13, 11, 9, 7], k=1)[0]) + random.randint(1, 9) / 2))
    cursor.execute("SELECT computer FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()[0]   
    time = (time / ((skill / 1000) + 1)) / technic_products[result][2]['speed']
    if int(time) in [2, 3, 4, 22, 23, 24]:
        hourname = '—á–∞—Å–∞'
    elif int(time) in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]:
        hourname = '—á–∞—Å–æ–≤'
    elif int(time) in [1, 21]:
        hourname = '—á–∞—Å'   
    button_text = f"makeprogram_accept:{user_id}"
    programsdict[user_id] = f"{user_id}:{name}:{description}:{time}:{price}:{skill}"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=button_text)) 
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, f'<b>‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "{name}":\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</b> {round(time, 1)} {hourname}\n<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {price} ‚ÇΩ', reply_markup=keyboard, parse_mode='html')

@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'makeprogram_accept')
async def makeprogram_accept(callback_query: types.CallbackQuery):
    global programsdict    
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return
    if await check_work(user_id, callback_query):
        return 
    user_id, name, description, time, price, skill = programsdict[user_id].split(':')
    user_id, time, price, skill = int(user_id), float(time) * 4, int(price), int(skill)    
    del programsdict[user_id]
    cursor2.execute("INSERT OR IGNORE INTO programs (user_id, name, description, time, price, skill, status, type, currency) VALUES (?, ?, ?, ?, ?, ?, 'no', 'programm', 'rub')", (user_id, name, description, int(time), price, skill))
    conn2.commit()
    cursor.execute("UPDATE users SET flag = 'process' WHERE user_id = ?", (user_id,))
    conn.commit()    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚úÖ–ü–µ—Ä–µ–π—Ç–∏", callback_data=f"program_status:{user_id}"))         
    await bot.send_message(user_id, f"<b>üëå–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:</b>", reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(user_id, callback_query.message.message_id)
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'program_status')
async def program_status(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    result = cursor2.execute("SELECT status, type FROM programs WHERE user_id = ?", (user_id,)).fetchone()
    if result:    
        status_work, typee = result
        if status_work == 'no':
            status_work = '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
            button_status = 'üëâ–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'
        elif status_work == 'yes':
            status_work = '–í —Ä–∞–±–æ—Ç–µ'
            button_status = 'üò¥–°–Ω—è—Ç—å –∑–∞–¥–∞—á—É'
        else:
            status_work = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
            if typee == 'script':
                button_status = 'ü§ù–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é'
            elif typee == 'programm':
                button_status = 'üßÆ–í—ã—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω'
            elif typee == 'game':
                button_status = 'üéÆ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–≥—Ä—É'
            else:
                button_status = 'üóÑ–°–¥–∞—Ç—å –∑–∞–¥–∞—á—É'
                
        keyboard = InlineKeyboardMarkup(row_width=1)
        if button_status in ['üëâ–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', 'üò¥–°–Ω—è—Ç—å –∑–∞–¥–∞—á—É']:
            keyboard.add(InlineKeyboardButton(button_status, callback_data=f"swap_status:{user_id}"))
        elif button_status == 'ü§ù–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é':
            keyboard.add(InlineKeyboardButton(button_status, callback_data=f"submit_job:{user_id}"))
        elif button_status == 'üéÆ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–≥—Ä—É':
            keyboard.add(InlineKeyboardButton(button_status, callback_data=f"publish:{user_id}"))
        elif button_status == 'üóÑ–°–¥–∞—Ç—å –∑–∞–¥–∞—á—É':
            keyboard.add(InlineKeyboardButton(button_status, callback_data=f"hack_done:{user_id}"))        
        else:
            keyboard.add(InlineKeyboardButton(button_status, callback_data=f"auction:{user_id}"))            
        keyboard.add(InlineKeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"program_delete_1:{user_id}")) 
        keyboard.add(InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"program_status:{user_id}"))          
        keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))
        await bot.delete_message(user_id, callback_query.message.message_id)
        
        program_name = cursor2.execute("SELECT name FROM programs WHERE user_id = ?", (user_id,)).fetchone()[0]
        program_time = round(cursor2.execute("SELECT time FROM programs WHERE user_id = ?", (user_id,)).fetchone()[0] / 4, 1)
        hourname = ''
        if int(program_time) in [2, 3, 4, 22, 23, 24]:
            hourname = '—á–∞—Å–∞'
        elif int(program_time) in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]:
            hourname = '—á–∞—Å–æ–≤'
        elif int(program_time) in [1, 21]:
            hourname = '—á–∞—Å'             
        await bot.send_message(user_id, f'<b>üìÇ–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: "{program_name}"\n\nüëå–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:</b> {status_work}\n<b>‚è∞–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {program_time} {hourname}', reply_markup=keyboard, parse_mode='html')    
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)        
        keyboard.add(InlineKeyboardButton("üë®‚Äçüíª–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data=f"tasks:{user_id}"))
        keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await bot.send_message(user_id, f"<b>ü§ì–ó–∞–¥–∞—á –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é:</b>", reply_markup=keyboard, parse_mode='html') 
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'swap_status')
async def program_swap(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    try:
        status_work = cursor2.execute("SELECT status FROM programs WHERE user_id = ?", (user_id,)).fetchone()[0]
        if status_work == 'no':
            cursor2.execute("UPDATE programs SET status = ? WHERE user_id = ?", ('yes', user_id))
            project = cursor2.execute("SELECT name FROM programs WHERE user_id = ?", (user_id,)).fetchone()[0]
            cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", (f'–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º "{project}"', user_id))        
        else:
            cursor2.execute("UPDATE programs SET status = ? WHERE user_id = ?", ('no', user_id))
            cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', user_id))   
        conn2.commit()
        conn.commit()        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"program_status:{user_id}"))
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await bot.send_message(user_id, f"<b>üëå–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω</b>", reply_markup=keyboard, parse_mode='html')
    except:
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await bot.send_message(user_id, f"<b>‚ùóÔ∏è–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</b>", parse_mode='html')        
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'program_delete_1')
async def program_delete_1(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ–î–∞", callback_data=f"program_delete:{user_id}"),
        InlineKeyboardButton("‚ùå–ù–µ—Ç", callback_data=f"program_status:{user_id}")                  
            ) 
    await bot.delete_message(user_id, callback_query.message.message_id)            
    await bot.send_message(user_id, "<b>–¢—ã —Ç–æ—á–Ω–æ —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?</b>", reply_markup=keyboard, parse_mode='html')
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'program_delete')
async def program_delete(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    try:
        cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))   
        cursor.execute("UPDATE users SET status = ?, rep = rep - 100 WHERE user_id = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', user_id))
        await bot.send_message(user_id, f"<b>üëå–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞</b>", parse_mode='html')
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await cmd_profile(types.CallbackQuery(data=f"profile:{user_id}"))
        conn2.commit()
        conn.commit()        
    except:
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await bot.send_message(user_id, f"<b>‚ùóÔ∏è–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</b>", parse_mode='html')      
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'submit_job')
async def submit_job(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])  
    if await check_life(user_id, callback_query):
        return    
    if cursor2.execute("SELECT type FROM programs WHERE user_id = ?", (user_id,)).fetchone() != ('script',):
        await bot.send_message(user_id, f"<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>", parse_mode='html')     
        return    
    cursor2.execute("SELECT price, currency FROM programs WHERE user_id = ?", (user_id,))   
    price, currency = cursor2.fetchone()
    price = int(price)
    cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))
    conn2.commit()   
    keyboard = InlineKeyboardMarkup(row_width=1)           
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))     
    if currency == 'rub':
        cursor.execute("UPDATE users SET ruble = ruble + ? WHERE user_id = ?", (price, user_id))       
        await bot.send_message(user_id, f"<b>–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price}‚ÇΩ</b>", reply_markup=keyboard, parse_mode='html')
    else:
        cursor.execute("UPDATE users SET dollar = dollar + ? WHERE user_id = ?", (price, user_id))       
        await bot.send_message(user_id, f"<b>–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price}$</b>", reply_markup=keyboard, parse_mode='html')        
    conn.commit()    
    await bot.delete_message(user_id, callback_query.message.message_id)        
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'auction')
async def auction(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])  
    if await check_life(user_id, callback_query):
        return  
    if cursor2.execute("SELECT type FROM programs WHERE user_id = ?", (user_id,)).fetchone() != ('programm',):
        await bot.send_message(user_id, f"<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>", parse_mode='html')     
        return
    try:
        keyboard = InlineKeyboardMarkup(row_width=1)       
        keyboard.add(InlineKeyboardButton("üá∑üá∫–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –°–ù–ì –±–∏—Ä–∂—É", callback_data=f"program_market:{user_id}:rub"))    
        keyboard.add(InlineKeyboardButton("üó∫–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω—É—é –±–∏—Ä–∂—É", callback_data=f"program_market:{user_id}:usd"))
        keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))    
        await bot.delete_message(user_id, callback_query.message.message_id)            
        await bot.send_message(user_id, f"<b>üõé–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", reply_markup=keyboard, parse_mode='html')    
    except:
        await bot.delete_message(user_id, callback_query.message.message_id)        
        await bot.send_message(user_id, f"<b>‚ùóÔ∏è–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</b>", reply_markup=keyboard, parse_mode='html')  
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'program_market')
async def sng_market(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return   
    if cursor2.execute("SELECT type FROM programs WHERE user_id = ?", (user_id,)).fetchone() != ('programm',):
        await bot.send_message(user_id, f"<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>", parse_mode='html')     
        return    
    money_flag = callback_query.data.split(':')[2]
    if money_flag == 'rub':
        money_name = '‚ÇΩ'
    else:
        money_name = '$'    
    await bot.delete_message(user_id, callback_query.message.message_id)            
    cursor2.execute("SELECT price FROM programs WHERE user_id = ?", (user_id,))   
    price = cursor2.fetchall()[0][0]
    cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))
    conn2.commit()      
    if money_flag == 'rub':
        step = price // 20
        itog_price = random.randint(int(price * 0.9), int(price * 1.1))
    else:
        data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
        price = price * round(1 / data['Valute']['USD']['Value'], 5)
        step = price // 20
        itog_price = random.randint(int(price * 0.75), int(price * 1.25))        
    
    if money_flag == 'rub':
        cursor.execute("UPDATE users SET ruble = ruble + ? WHERE user_id = ?", (itog_price, user_id))
    else:
        cursor.execute("UPDATE users SET dollar = dollar + ? WHERE user_id = ?", (itog_price, user_id))        
    conn.commit()        
    
    msg = await bot.send_message(user_id, f"<b>–¢–æ—Ä–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è...</b>", parse_mode='html')
    count = random.randint(4, 6)
    if step == 0:
        step = 1
    for i in range(count - 1, -1, -1):
        await asyncio.sleep(1)        
        await msg.edit_text(f"ü§ö {itog_price - step * i} {money_name}")
    msg = await bot.send_message(user_id, "3...")
    await asyncio.sleep(1)
    await msg.edit_text("3...2...")
    await asyncio.sleep(1)            
    await msg.edit_text("3...2...1...")
    await asyncio.sleep(1)
    await msg.edit_text(f"–ü—Ä–æ–¥–∞–Ω–æ –∑–∞: {itog_price} {money_name}")
    
    keyboard = InlineKeyboardMarkup(row_width=1)           
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))  
    await bot.send_message(user_id, f"<b>üëå{itog_price} {money_name} –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å</b>", reply_markup=keyboard, parse_mode='html')
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'publish')
async def publish(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return   
    if cursor2.execute("SELECT type FROM programs WHERE user_id = ?", (user_id,)).fetchone() != ('game',):
        await bot.send_message(user_id, f"<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>", parse_mode='html')     
        return    
    conn4 = sqlite3.connect(f'{user_id}.db')
    cursor4 = conn4.cursor()
    cursor4.execute('''
        CREATE TABLE IF NOT EXISTS games (
            i INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            time INTEGER,
            price INTEGER,
            count INTEGER,
            summ INTEGER,
            donate INTEGER
        )
    ''')
    conn4.commit()          
    name, time, price = cursor2.execute("SELECT name, time, price FROM programs WHERE user_id = ?", (user_id,)).fetchone()
    time, price = int(time), int(price)
    cursor4.execute("INSERT INTO games (name, time, price, count, summ, donate) VALUES (?, 36, ?, 0, 0, 0)", (name, price))
    conn4.commit()      
    
    if user_id not in users_games_set:
        users_games_set.add(user_id)
        users_games_file = open("Resources/games.txt", "a")
        users_games_file.write(str(user_id))
        users_games_file.write('\n')        
        users_games_file.close()
    
    cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))
    conn2.commit()  
    
    keyboard = InlineKeyboardMarkup(row_width=1)           
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))        
    await bot.delete_message(user_id, callback_query.message.message_id)        
    await bot.send_message(user_id, f'<b>üëå–ò–≥—Ä–∞: "{name}" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</b>', reply_markup=keyboard, parse_mode='html')
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'my_games')
async def my_games(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    if os.path.exists(f'{user_id}.db'):
        conn5 = sqlite3.connect(f'{user_id}.db')
        cursor5 = conn5.cursor()
        keyboard = InlineKeyboardMarkup(row_width=1)           
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))  
        text = ''
        j = 1
        for i in cursor5.execute("SELECT name, summ, donate FROM games").fetchall():
            text += f'{j}. üïπ–ò–≥—Ä–∞: "{i[0]}" üí∞–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∞: {i[1]} ‚ÇΩ –∏ {i[2]} TON' + "\n"
            j += 1
        await bot.delete_message(user_id, callback_query.message.message_id) 
        await bot.send_message(user_id, f'<b>{text}</b>', reply_markup=keyboard, parse_mode='html')
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)           
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))          
        await bot.delete_message(user_id, callback_query.message.message_id) 
        await bot.send_message(user_id, '<b>‚ùå–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä</b>', reply_markup=keyboard, parse_mode='html')        
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'hack_done')
async def hack_done(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return   
    if cursor2.execute("SELECT type FROM programs WHERE user_id = ?", (user_id,)).fetchone() != ('hack',):
        await bot.send_message(user_id, f"<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>", parse_mode='html')     
        return  
    
    cursor2.execute("SELECT price FROM programs WHERE user_id = ?", (user_id,))   
    price = cursor2.fetchone()[0]
    price = float(price)
    cursor2.execute("DELETE FROM programs WHERE user_id = ?", (user_id,))
    conn2.commit()   
    keyboard = InlineKeyboardMarkup(row_width=1)           
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))     
    cursor.execute("UPDATE users SET toncoin = toncoin + ? WHERE user_id = ?", (price, user_id))       
    await bot.send_message(user_id, f"<b>üëç–ó–∞–¥–∞—á–∞ —Å–¥–∞–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {price} TON</b>", reply_markup=keyboard, parse_mode='html')        
    conn.commit()    
    await bot.delete_message(user_id, callback_query.message.message_id) 
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'go_to_bed')
async def go_to_bed(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", ('—Å–ø–∏—Ç', user_id))
    conn.commit()    
    cursor2.execute("SELECT name FROM programs WHERE user_id = ?", (user_id,))
    result = cursor2.fetchone()
    if result:
        cursor2.execute("UPDATE programs SET status = ? WHERE user_id = ?", ('no', user_id))
        conn2.commit()

    await bot.delete_message(user_id, callback_query.message.message_id)    
    await cmd_profile(types.CallbackQuery(data=f"profile:{user_id}"))
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'awake')
async def awake(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    cursor.execute("UPDATE users SET status = ? WHERE user_id = ?", ('–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç', user_id))
    conn.commit()       
    await bot.delete_message(user_id, callback_query.message.message_id)    
    await cmd_profile(types.CallbackQuery(data=f"profile:{user_id}"))   
      
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'promo')
async def promo(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, '<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>', reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('promo', user_id))
    conn.commit()   
    await bot.delete_message(user_id, callback_query.message.message_id)  
    
@dp.message_handler(lambda message: message.text and cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (message.chat.id,)).fetchone() and cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] == 'promo')
async def promo_check(message: types.Message):
    user_id = message.chat.id
    text = message.text
    cursor3.execute("SELECT value, type FROM proms WHERE name = ?", (text,))
    result = cursor3.fetchone()
    keyboard = InlineKeyboardMarkup(row_width=1)           
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}")) 
    if result:
        with open(f"{text}.txt") as proms:
            lines = [line.rstrip() for line in proms]        
        if str(user_id) not in lines:
            cursor3.execute("SELECT count FROM proms WHERE name = ?", (text,))
            result2 = cursor3.fetchone()[0]            
            if result2 == 0:
                cursor3.execute("DELETE FROM proms WHERE name = ?", (text,))
                conn3.commit() 
                os.remove(f"{text}.txt")   
                await bot.send_message(user_id, f"<b>‚ùå–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>", parse_mode='html')
                await bot.send_message(admin_id, f"<b>–ü—Ä–æ–º–æ–∫–æ–¥: {text} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>", parse_mode='html')                 
            else:
                cursor3.execute("UPDATE proms SET count = count - 1 WHERE name = ?", (text,))
                conn3.commit()
                proms = open(f"{text}.txt", 'a')
                proms.write(str(user_id))
                proms.write('\n')
                proms.close()                
                if result[1] == 'ton':
                    cursor.execute("UPDATE users SET toncoin = toncoin + ? WHERE user_id = ?", (float(result[0]), user_id))
                    conn.commit()
                    await bot.send_message(user_id, f"<b>‚úÖ–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {result[0]} TON</b>", reply_markup=keyboard, parse_mode='html')               
                elif result[1] == 'skill':
                    cursor.execute("UPDATE users SET skill = skill + ? WHERE user_id = ?", (int(result[0]), user_id))
                    conn.commit()
                    await bot.send_message(user_id, f"<b>‚úÖ–ù–∞–≤—ã–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {result[0]}</b>", reply_markup=keyboard, parse_mode='html') 
        else:
            await bot.send_message(user_id, "<b>‚ùå–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥</b>", reply_markup=keyboard, parse_mode='html')                          
    else:
        await bot.send_message(user_id, "<b>‚ùå–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>", reply_markup=keyboard, parse_mode='html')        
   
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'profile')
async def cmd_profile(callback_query: types.CallbackQuery):
    global programsdict    
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    if user_id in programsdict:
        del programsdict[user_id]    
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('empty', user_id))
    conn.commit()
    cursor.execute("SELECT telegram_name, energy, health, hunger, status, rep, ruble, dollar, toncoin, exchange, skill, computer, flag FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        telegram_name, energy, health, hunger, status, rep, ruble, dollar, toncoin, exchange, skill, computer, flag = result
        computer = technic_products[computer][0]
        keyboard = InlineKeyboardMarkup(row_width=1)        
        if status == '—Å–ø–∏—Ç':
            keyboard.add(
            InlineKeyboardButton("üõè–ü—Ä–æ—Å–Ω—É—Ç—å—Å—è", callback_data=f"awake:{user_id}"),
            InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"profile:{user_id}")
            )  
        else:
            keyboard.add(
            InlineKeyboardButton("üí±–û–±–º–µ–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f"exchange_money:{user_id}"),
            InlineKeyboardButton("üõç–ú–∞–≥–∞–∑–∏–Ω", callback_data=f"shop:{user_id}"),
            InlineKeyboardButton("üìã–ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data=f"program_status:{user_id}"),
            InlineKeyboardButton("üéÆ–ú–æ–∏ –∏–≥—Ä—ã", callback_data=f"my_games:{user_id}"),
            InlineKeyboardButton("üõå–°–ø–∞—Ç—å", callback_data=f"go_to_bed:{user_id}"),
            InlineKeyboardButton("üé≤–ò–≥—Ä–∞—Ç—å", callback_data=f"play:{user_id}"),
            InlineKeyboardButton("üéÅ–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"promo:{user_id}"),
            InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"profile:{user_id}")
            )
        picture = ''
        if status == '—Å–ø–∏—Ç':
            picture = 'sleep'
        elif status == '–±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞–µ—Ç':
            picture = 'relax'
        else:
            picture = 'work'  
        if user_id in beta_test_users_set:
            picture += '_beta'
        photo = types.InputFile(f"Image/{picture}.jpg")
        await bot.send_photo(user_id, photo, 
            caption=f"<b>üñº–ü–†–û–§–ò–õ–¨:</b>\n\nüò∏–ò–º—è: {telegram_name}\nüìà–†–µ–ø—É—Ç–∞—Ü–∏—è: {rep}\n‚öôÔ∏è–°—Ç–∞—Ç—É—Å: {status}\n\nüíª–ù–æ—É—Ç–±—É–∫: {computer}\nüìï–ù–∞–≤—ã–∫: {skill}\n\nüí≥–†—É–±–ª–∏: {round(ruble, 2)}\nüí≤–î–æ–ª–ª–∞—Ä—ã: {round(dollar, 5)}\nü™ôTON: {round(toncoin, 5)}\n\n‚ö°Ô∏è–≠–Ω–µ—Ä–≥–∏—è: {energy}\n‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ: {health}\nü§§–°—ã—Ç–æ—Å—Ç—å: {hunger}",
            parse_mode='html',
            reply_markup=keyboard
        )
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except:
            pass
    else:
        await bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except:
            pass
        
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'exchange_money')
async def process_exchange_money_m(callback_query: types.CallbackQuery):
    await process_exchange_money(callback_query)

@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'play')
async def play(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"profile:{user_id}"))
    await bot.send_message(user_id, f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä: 1 TON</b>\n\n<b>–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—è –±–æ—Ç—É —ç–º–æ–¥–∂–∏:</b>\n<code>üé≤</code>, <code>üéØ</code>, <code>üé≥</code>, <code>üèÄ</code>, <code>‚öΩ</code> –∏ <code>üé∞</code>\n\n<b><i>–î–∂–µ–∫–ø–æ—Ç—ã:</i></b>\n‚öΩ - 1.5 TON\nüèÄ - 2 TON\nüé≤ - 5 TON\nüéØ - 5 TON\nüé≥ - 5 TON\nüé∞ - 40 –∏–ª–∏ 5 TON", reply_markup=keyboard, parse_mode='html')
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('play', user_id))
    conn.commit()   
    await bot.delete_message(user_id, callback_query.message.message_id)  
    
@dp.callback_query_handler(lambda c: c.data.split(':')[0] == 'play_again')
async def play_again(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    if await check_life(user_id, callback_query):
        return    
    cursor.execute("UPDATE users SET flag = ? WHERE user_id = ?", ('play', user_id))
    conn.commit()   
    await bot.delete_message(user_id, callback_query.message.message_id)  
    
@dp.message_handler(content_types=['any'])
async def emoji_message(message: types.Message):
    user_id = message.chat.id 
    if cursor.execute("SELECT flag FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] == 'play':
        flag = 0
        try:
            if message["forward_origin"] != None:
                flag = 1
        except:
            pass
        try:
            if flag == 1:
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))
                keyboard.add(InlineKeyboardButton("üïπ–°—ã–≥—Ä–∞—Ç—å", callback_data=f"play_again:{user_id}"))                
                await bot.send_message(user_id, "<b>‚ùå–ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã</b>", reply_markup=keyboard, parse_mode='html')                
            elif cursor.execute("SELECT toncoin FROM users WHERE user_id = ?", (message.chat.id,)).fetchone()[0] >= 1:
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("‚ùå–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É", callback_data=f"profile:{user_id}"))
                emoji = ord(message.dice.emoji)  
                cursor.execute("UPDATE users SET toncoin = toncoin - 1 WHERE user_id = ?", (user_id,))  
                if message.dice.value in emoji_dict[emoji][0]:
                    prize = emoji_dict[emoji][1]
                    if emoji == 127920 and message.dice.value in emoji_dict[emoji][0][1:]:
                        prize = emoji_dict[emoji][2]
                    await asyncio.sleep(2)
                    await bot.send_message(user_id, f"<b>üéâ{random.choice(good_news)}\n{prize} TON –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å</b>", reply_markup=keyboard, parse_mode=  'html')
                    cursor.execute("UPDATE users SET toncoin = toncoin + ? WHERE user_id = ?", (prize, user_id))            
                else:
                    await asyncio.sleep(2)
                    await bot.send_message(user_id, f"<b>üòø{random.choice(bad_news)}</b>", reply_markup=keyboard, parse_mode='html')
                conn.commit()
            else:
                await bot.send_message(user_id, f"<b>‚ùå–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã</b>", parse_mode='html')                
        except:
            await bot.send_message(user_id, "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>", parse_mode='html')
    else:   
        if cursor.execute("SELECT status FROM users WHERE user_id = ?", (user_id,)).fetchone()[0] == '–≤—ã–±—ã–ª':
            await bot.send_message(user_id, "<b>üìå–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—ë—Ä—Ç–≤, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É:\n\n–ù–∞–∂–º–∏—Ç–µ: /start</b>", parse_mode='html')
            return True
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("üñº–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile:{user_id}"))        
        await bot.send_message(user_id, "<b>ü§∑‚Äç‚ôÇÔ∏è–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å</b>", reply_markup=keyboard, parse_mode='html')
    
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
